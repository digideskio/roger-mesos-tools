#!/usr/bin/python

from __future__ import print_function
import argparse
from decimal import *
from jinja2 import Environment, FileSystemLoader
from datetime import datetime
import subprocess
import json
import os
import requests
import sys
import re

import contextlib

@contextlib.contextmanager
def chdir(dirname):
  '''Withable chdir function that restores directory'''
  curdir = os.getcwd()
  try:
    os.chdir(dirname)
    yield
  finally: os.chdir(curdir)

class Slack:
  def __init__(self, config, token_file):
    self.disabled = True
    try:
      from slackclient import SlackClient
    except:
      print("Warning: SlackClient library not found, not using slack\n", file=sys.stderr)
      return

    try:
      self.channel = config['channel']
      self.method = config['method']
      self.username = config['username']
      self.emoji = config['emoji']
    except (TypeError, KeyError) as e:
      print("Warning: slack not setup in config (error: %s). Not using slack.\n" % e, file=sys.stderr)
      return

    try:
      with open(token_file) as stoken:
        r = stoken.readlines()
      slack_token = ''.join(r).strip()
      self.client = SlackClient(slack_token)
    except IOError:
      print("Warning: slack token file %s not found/readable. Not using slack.\n" % token_file, file=sys.stderr)
      return

    self.disabled = False

  def api_call(self, text):
    if not self.disabled:
      self.client.api_call(self.method, channel=self.channel, username=self.username, icon_emoji=self.emoji, text=text)


# Author: cwhitten
# Purpose: Initial plumbing for a standardized deployment
#          process into the ClusterOS
#
# Keys off of a master config file in APP_ROOT/config/
#   with the naming convention APP_NAME.json
# Container-specific Marathon files live in APP_ROOT/templates/ with the
#   naming convention APP_NAME-SERVICE_NAME.json
#
# See README for details and intended use.
#
# Attempts to get a version from an existing image on marathon (formatting rules apply)

# Expected format:
#   <host>:<port>/moz-content-agora-7da406eb9e8937875e0548ae1149/v0.46
def getNextVersion(config, roger_env, environment, application, branch, repo):
    imageRe = re.compile("^[^/].*/(.*)-[0-9a-f]+/v([0-9.]+)")
    data = getMarathonState(roger_env, environment)
    sha = getGitSha(repo, branch)
    currentSha = ''
    version = ''

    for app in data['apps']:
      if app['container'] != None:
        match = imageRe.match(app['container']['docker']['image'])
        if match and match.group(1) == (config['name'] + '-' + application): # Regex must match up with image naming scheme below
          currentSha = extractShaFromImage(app['container']['docker']['image'])
          if currentSha is None:
            print('''
              Current {} image has no embedded SHA, continuing..
              '''.format(application))

          version = match.group(2)
          newVersion = "{}/v{}".format(sha, Decimal(version) + Decimal(10) ** -2)
          print("Bumping version: {}".format(newVersion))
          return newVersion

    return "{}/v{}".format(sha, Decimal(0.00) + Decimal(10) ** -2)

# Expected format:
#   <host>:<port>/moz-<project>-<service>-<sha>/v0.46
def getCurrentVersion(roger_env, environment, application):
  data = getMarathonState(roger_env, environment)

  for app in data['apps']:
    if app['container'] != None:
      if application in app['container']['docker']['image']:
        return extractFullShaAndVersion(app['container']['docker']['image'])

# Expected format:
#   <host>:<port>/moz-content-kairos-7da406eb9e8937875e0548ae1149/v0.46
def extractFullShaAndVersion(image):
  return image.split('-')[3]

# Expected format:
#   <host>:<port>/moz-content-kairos-7da406eb9e8937875e0548ae1149/v0.46
def extractShaFromImage(image):
  sha = image.split('/')
  if sha != None and sha[1] != None:
    sha = sha[1].split('-')
    if sha[3] != None:
      return sha[3]
  return ''

def getMarathonState(roger_env, environment):
  url = roger_env['environments'][environment]['marathon_endpoint']+"/v2/apps"
  resp = requests.get(url)
  return resp.json()

def getGitSha(repo, branch):
  with chdir('src/' + repo):
    proc = subprocess.Popen(
        ["git rev-parse origin/{} --verify HEAD".format(branch)],
        stdout=subprocess.PIPE, shell=True)

    out = proc.communicate()
    return out[0].split('\n')[0]

def parseArgs():
  parser = argparse.ArgumentParser(description='Deploy into Roger.')
  parser.add_argument('-e', '--environment', metavar='env',
    help="Environment to deploy to. example: 'dev' or 'stage'")
  parser.add_argument('application', metavar='application',
    help="Target to be deployed. example: 'all' or 'kairos'")
  parser.add_argument('-b', '--branch', metavar='branch',
    help="Branch to be deployed.Defaults to master. example: 'production' or 'master'")
  parser.add_argument('-s', '--skip_build', metavar='skip_build',
    help="Flag that skips roger-build when set to true. Defaults to false.'")
  parser.add_argument('config_file', metavar='config_file',
    help="Configuration file to be used for the project. example: 'content.json' or 'kwe.json'")
  return parser

def main():
  applicationRoot = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../'))
  parser = parseArgs()
  args = parser.parse_args()
  
  with open('{0}/config/roger-env.json'.format(applicationRoot)) as roger_env:
    roger_env = json.load(roger_env)

  with open('{0}/config/{1}'.format(applicationRoot, args.config_file)) as config:
    config = json.load(config)

  if args.application not in config['apps']:
    sys.exit('Application specified not found.')
 
  if 'registry' not in roger_env:
   sys.exit('Registry not found in roger-env.json file.') 

  #Setup for Slack-Client, token, and git user
  slack = Slack(config['notifications'], '.slack_token')

  os.chdir(applicationRoot)
  if not os.path.isdir('src'):
    os.mkdir('src')

  if args.application == 'all':
    apps = config['apps'].keys()
  else:
    apps = [args.application]

  os.chdir(applicationRoot)
  common_repo = config.get('repo', '')
  environment = roger_env.get('default', '')

  work_dir = ''
  if "ROGER_DEPLOY_SOURCE_DIR" in os.environ:
    work_dir = os.environ.get('ROGER_DEPLOY_SOURCE_DIR')
  if work_dir == '':
    sys.exit("Environment variable $ROGER_DEPLOY_SOURCE_DIR is not set")

  if args.environment is None:
    if "ROGER_ENV" in os.environ:
      env_var = os.environ.get('ROGER_ENV')
      if env_var == '':
        print("Environment variable $ROGER_ENV is not set. Using the default set from roger-env.json file")
      else:
        print("Using value {} from environment variable $ROGER_ENV".format(env_var))
        environment = env_var 
  else:
    environment = args.environment

  if environment not in roger_env['environments']:
    sys.exit('Environment not found in roger-env.json file.')

  branch = "master"     #master by default
  if not args.branch is None:
    branch = args.branch

  for app in apps:
    deployApp(args, config, roger_env, work_dir, environment, app, branch, slack, args.config_file, common_repo)

def deployApp(args, config, roger_env, work_dir, environment, app, branch, slack, config_file, common_repo):
  startTime = datetime.now()

  applicationRoot = os.path.dirname(os.path.realpath(__file__))
  environmentObj = roger_env['environments'][environment]
  data = config['apps'][app]
  repo = ''
  if common_repo != '':
    repo = data.get('repo', common_repo)
  else:
    repo = data.get('repo', args.app_name)

  print("rm -rf {0}/{1}".format(os.path.abspath(work_dir), repo))
  os.system("rm -rf {0}/{1}".format(os.path.abspath(work_dir), repo))
  image_name = ''
  image = ''

  # get/update target source(s)
  os.system("{0}/bin/roger-git-pull {1} {2} {3} --branch {4}".format(applicationRoot, app, os.path.abspath(work_dir), config_file, branch))

  skip_build = "false"
  if not args.skip_build is None:
    skip_build = args.skip_build

  image_name = getCurrentVersion(roger_env, environment, app)
  if skip_build != "true":
    #Docker build,tag and push
    image_name = getNextVersion(config, roger_env, environment, app, branch, repo)
    os.system("{0}/bin/roger-build {1} {2} {3} {4}".format(applicationRoot, app, os.path.abspath(work_dir), image_name, config_file))
  print("Version is:"+image_name) 

  #Deploying the app to marathon
  os.system("{0}/bin/roger-put {1} {2} \"{3}\" {4} --env {5}".format(applicationRoot, app, os.path.abspath(work_dir), image_name, config_file, environment))

  deployTime = datetime.now() - startTime
  git_username = subprocess.check_output("git config user.name", shell=True)
  deployMessage = "{0}'s deploy for {1} / {2} / {3} ({5}) completed in {4} seconds.".format(
    git_username.rstrip(), app, environment, branch, deployTime.total_seconds(), image_name)
  slack.api_call(deployMessage)
  print(deployMessage)


if __name__ == "__main__":
  main()
