#!/usr/bin/python

from __future__ import print_function
import argparse
import json
import os
import sys

import contextlib

@contextlib.contextmanager
def chdir(dirname):
  '''Withable chdir function that restores directory'''
  curdir = os.getcwd()
  try:
    os.chdir(dirname)
    yield
  finally: os.chdir(curdir)

def parse_args():
  parser = argparse.ArgumentParser(description='To create sample marathon and application config files.')
  parser.add_argument('app', metavar='app',
    help="Name of application to be built. example: 'agora' or 'grafana'")
  parser.add_argument('id', metavar='id',
    help="Application id used for Marathon. example: 'roger-collectd' or 'roger-statsd'")
  parser.add_argument('name', metavar='name',
    help="Project name. example: 'moz-kwe' or ' moz-content")
  parser.add_argument('filename', metavar='filename',
    help="Configuration file name to be used for the project. example: 'content.json' or 'kwe.json'")
  return parser

def writeJson(json, path, filename):
  with open("{0}/{1}".format(path, filename), 'wb') as fh:
      fh.write(json)

def createSlackTags():
  slack_dict = {}
  slack_dict['channel'] = "channel_id"
  slack_dict['method'] = "chat.postMessage"
  slack_dict['username'] = "project_name Deployment"
  slack_dict['emoji'] = ":rocket:"
  return slack_dict

def createVariableTags():
  variables, global_dict, environment, dev_dict, stage_dict, prod_dict = [{} for dummy in range(6)]
  environment['dev'] = dev_dict
  environment['stage'] = stage_dict
  environment['prod'] = prod_dict
  variables['global'] = global_dict
  variables['environment'] = environment 
  return variables

def createAppTags(app_name):
  app_dict, details = {}, {}
  details['name'] = app_name
  details['template_path'] = "marathon_template_path"
  details['path'] = "dockerfile_path"
  details['vars'] = createVariableTags()
  details['imageBase'] = "{0}-base".format(app_name)
  container_list = ['{0}'.format(app_name)]
  details['containers'] = container_list
  app_dict['{0}'.format(app_name)] = details 
  return app_dict

def createAppConfig(root, filename, app_name, project_name):
  path = "{0}/config".format(root)
  json_dict, app_dict = {}, {}
  json_dict['name'] = project_name
  json_dict['notifications'] = createSlackTags()
  json_dict['repo'] = "repo_name"
  json_dict['vars'] = createVariableTags()
  app_dict = createAppTags(app_name)
  json_dict['apps'] = app_dict
  json_output = json.dumps(json_dict, indent=2)
  path = "{0}/config".format(root)
  writeJson(json_output, path, filename)  

def createPortMappings():
  port_dict = {}
  port_dict['containerPort'] = "8125"
  port_dict['hostPort'] = "0"
  port_dict['servicePort'] = "0"
  port_dict['protocol'] = "tcp"
  return port_dict

def createContainerTags():
  container_dict, docker_dict = {}, {}
  docker_dict['image'] = "{{ image }}"
  docker_dict['network'] = "BRIDGE"
  docker_dict['portMappings'] = createPortMappings()
  container_dict['type'] = "DOCKER"
  container_dict['docker'] = docker_dict
  return container_dict

def createMarathonConfig(templ_dir, filename, app_id):
  json_dict, env = {}, {}
  '''
  {
  "container": {
    "type": "DOCKER",
    "docker": {
      "image": "{{ image }}",
      "network": "BRIDGE",
      "portMappings": [
        {
          "containerPort": 8125,
          "hostPort": 0,
          "servicePort": 0,
          "protocol": "udp"
        },
        {
          "containerPort": 8126,
          "hostPort": 0,
          "servicePort": 0,
          "protocol": "tcp"
        }
      ]
    },
    "ports": [ 0, 0 ]
  },
  '''
  json_dict['container'] = createContainerTags()
  env['ENV_VAR1'] = "value1"
  env['ENV_VAR2'] = "value2"
  json_dict['id'] = app_id
  json_dict['instances'] = "1"
  json_dict['cpus'] = "0.2"
  json_dict['mem'] = "1"
  json_dict['env'] = env
  json_output = json.dumps(json_dict, indent=2)
  writeJson(json_output, templ_dir, filename)

def main():
  parser = parse_args()
  args = parser.parse_args()
  root = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../'))
  templ_dir = ''
  if "ROGER_TEMPLATES_DIR" in os.environ:
    templ_dir = os.environ.get('ROGER_TEMPLATES_DIR')
  if templ_dir == '':
    sys.exit("Environment variable $ROGER_TEMPLATES_DIR is not set")
  templ_dir = os.path.abspath(templ_dir)
  file_exists = os.path.exists("{0}/config/{1}".format(root, args.filename))

  if file_exists:
    print("File {0} already exists in {1}/config/".format(args.filename, root))
  else:
    createAppConfig(root, args.filename, args.app, args.name)
  
  marathon_filename = "{0}-{1}.json".format(args.name, args.app)
  file_exists = os.path.exists("{0}/{1}".format(templ_dir, marathon_filename))
  if file_exists:
    print("File {0} already exists in {1}".format(marathon_filename, templ_dir))
  else:
    createMarathonConfig(templ_dir, marathon_filename, args.id)

if __name__ == "__main__":
  main()
