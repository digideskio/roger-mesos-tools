#!/usr/bin/env python

from __future__ import print_function
#from common_environment import environment_parameters.parse_args, environment_parameters.get_hostname_from_marathon, environment_parameters.get_containerid
from common_environment import environment_parameters
import argparse
import subprocess
import json
import os
import requests
import subprocess
import sys
from settings import Settings
from appconfig import AppConfig

def main():
    parser = environment_parameters.parse_args()
    args = parser.parse_args()
    config_dir = settingObj.getConfigDir()
    roger_env = appObj.getRogerEnv(config_dir)
    environment = roger_env.get('default', '')

    if args.env is None:
      if "ROGER_ENV" in os.environ:
        env_var = os.environ.get('ROGER_ENV')
        if env_var.strip() == '':
          print("Environment variable $ROGER_ENV is not set.Using the default set from roger-env.json file")
        else:
          print("Using value {} from environment variable $ROGER_ENV".format(env_var))
          environment = env_var
    else:
      environment = args.env

    if environment not in roger_env['environments']:
      sys.exit('Environment not found in roger-env.json file.')

    hostname = ''
    containerId = ''
    if args.hostname == None:
        hostname = environment_parameters.get_hostname_from_marathon(environment, roger_env, args.appTaskId);
    else:
        hostname = args.hostname;

    if hostname != '':	#Hostname maybe empty when the given appTaskId does not match any taskId from Marathon
        containerId = environment_parameters.get_containerid(args.appTaskId, hostname);
    else:
        print("Most likely hostname could not be retrieved with appTaskId {0}. Hostname is also \
an optional argument. See -h for usage.".format(args.appTaskId));
    if containerId != '' and containerId != None:
        print("If there are multiple containers that pattern match the given mesos task Id, \
then will log into the first one")
        print("Displaying logs in docker container - {0} on host - {1} for application Task Id {2}".format(containerId, hostname, args.appTaskId));
        subprocess.check_call("docker -H tcp://{0}:4243 logs -f=true -t {1}".format(hostname, containerId), shell=True);
    else:
        print("No Container found on host {0} with application Task Id {1}".format(hostname, args.appTaskId));

if __name__ == '__main__':
    settingObj = Settings()
    appObj = AppConfig()
    main()
